# Export can take a basic data type as an argument, which will be
# used in the editor.
export(int) var number



<----- Integers and strings hint enumerated values ----->

export var number = 5 # Value will be saved and visible in the property editor.

# Editor will enumerate as 0, 1 and 2.
export(int, "Warrior", "Magician", "Thief") var character_class
export(String, "Rebecca", "Mary", "Leah") var character_name

# Named enum values
# Editor will enumerate as THING_1, THING_2, ANOTHER_THING.
enum NamedEnum {THING_1, THING_2, ANOTHER_THING = -1}
export(NamedEnum) var x



<----- Strings as paths ----->

# String is a path to a file.
export(String, FILE) var f
# String is a path to a directory.
export(String, DIR) var f
# String is a path to a file, custom filter provided as hint.
export(String, FILE, "*.txt") var f

# Using paths in the global filesystem is also possible,
# but only in scripts in "tool" mode.

# String is a path to a PNG file in the global filesystem.
export(String, FILE, GLOBAL, "*.png") var tool_image
# String is a path to a directory in the global filesystem.
export(String, DIR, GLOBAL) var tool_dir

# The MULTILINE setting tells the editor to show a large input
# field for editing over multiple lines.
export(String, MULTILINE) var text


<----- Limiting editor input ranges ----->

# Allow integer values from 0 to 20.
export(int, 20) var i
# Allow integer values from -10 to 20.
export(int, -10, 20) var j
# Allow floats from -10 to 20 and snap the value to multiples of 0.2.
export(float, -10, 20, 0.2) var k
# Allow values 'y = exp(x)' where 'y' varies between 100 and 1000
# while snapping to steps of 20. The editor will present a
# slider for easily editing the value.
export(float, EXP, 100, 1000, 20) var l



----Floats with easing hint----

# Display a visual representation of the 'ease()' function
# when editing.
export(float, EASE) var transition_speed



<----- Colors ----->

# Color given as red-green-blue value (alpha will always be 1).
export(Color, RGB) var col
# Color given as red-green-blue-alpha value.
export(Color, RGBA) var col



<----- Nodes ----->

# Another node in the scene can be exported as a NodePath.
export(NodePath) var node_path
# Do take note that the node itself isn't being exported
# there is one more step to call the true node:
var node = get_node(node_path)



<----- Resources ----->

# Export can take a resource type to use as a hint.
export(AnimationNode) var resource
export(Texture) var character_face
export(PackedScene) var scene_file

# There are many resource types that can be used this way, try e.g.
# the following is to list them:
export(Resource) var resource



<----- Exporting bit flags ----->

Integers used as bit flags can store multiple true/false (boolean) values in one property.
export(int, FLAGS, "Fire", "Water", "Earth", "Wind") var spell_elements = 0

You must provide a string description for each flag. In this example, Fire has value 1, Water has value 2, Earth has value 4 and Wind corresponds to value 8. Usually, constants should be defined accordingly (e.g. const ELEMENT_WIND = 8 and so on).

Export hints are also provided for the physics and render layers defined in the project settings:
export(int, LAYERS_2D_PHYSICS) var layers_2d_physics
export(int, LAYERS_2D_RENDER) var layers_2d_render
export(int, LAYERS_3D_PHYSICS) var layers_3d_physics
export(int, LAYERS_3D_RENDER) var layers_3d_render

Using bit flags requires some understanding of bitwise operations. If in doubt, use boolean variables instead.



<----- Exporting arrays ----->

# Exported array, shared between all instances.
# Default value must be a constant expression.
export var a = [1, 2, 3]

# Regular array, created local for every instance.
# Default value can include run-time values, but can't
# be exported.
var c = [a, 2, 3]

export(Array, int) var ints = [1,2,3]
export(Array, int, "Red", "Green", "Blue") var enums = [2, 1, 0]
export(Array, Array, float) var two_dimensional = [[1.0, 2.0], [3.0, 4.0]]

export(Array) var b
export(Array, PackedScene) var scenes

# Arrays with specified types which inherit from resource can be set by
# drag-and-dropping multiple files from the FileSystem dock.
export(Array, Texture) var textures
export(Array, PackedScene) var scenes

# Typed arrays also work, only initialized empty:
export var vector3s = PackedVector3Array()
export var strings = PackedStringArray()



<----- Setting exported variables from a tool script ----->

When changing an exported variable's value from a script in Tool mode, the value in the inspector won't be updated automatically. To update it, call property_list_changed_notify() after setting the exported variable's value.



<----- Advanced exports ----->

Not every type of export can be provided on the level of the language itself to avoid unnecessary design complexity. The following describes some more or less common exporting features which can be implemented with a low-level API.

Before reading further, you should get familiar with the way properties are handled and how they can be customized with _set(), _get(), and _get_property_list() methods as described in Accessing data or logic from an object.

For binding properties using the above methods in C++, see Binding properties using _set/_get/_get_property_list.



<----- Warning ----->

The script must operate in the tool mode so the above methods can work from within the editor.



<----- Adding script categories ----->

For better visual distinguishing of properties, a special script category can be embedded into the inspector to act as a separator. Script Variables is one example of a built-in category.

func _get_property_list():
    var properties = []
    properties.append(
        {
            name = "Debug",
            type = TYPE_NIL,
            usage = PROPERTY_USAGE_CATEGORY | PROPERTY_USAGE_SCRIPT_VARIABLE
        }
    )
    return properties

    name is the name of a category to be added to the inspector;
    PROPERTY_USAGE_CATEGORY indicates that the property should be treated as a script category specifically, so the type TYPE_NIL can be ignored as it won't be actually used for the scripting logic, yet it must be defined anyway.



<----- Grouping properties ----->

A list of properties with similar names can be grouped.

func _get_property_list():
    var properties = []
    properties.append({
            name = "Rotate",
            type = TYPE_NIL,
            hint_string = "rotate_",
            usage = PROPERTY_USAGE_GROUP | PROPERTY_USAGE_SCRIPT_VARIABLE
    })
    return properties

name is the name of a group which is going to be displayed as collapsible list of properties;
every successive property added after the group property will be collapsed and shortened as determined by the prefix defined via the hint_string key. For instance, rotate_speed is going to be shortened to speed in this case.
PROPERTY_USAGE_GROUP indicates that the property should be treated as a script group specifically, so the type TYPE_NIL can be ignored as it won't be actually used for the scripting logic, yet it must be defined anyway.


